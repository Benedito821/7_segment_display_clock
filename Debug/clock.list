
clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002718  08002718  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002718  08002718  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002718  08002718  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002718  08002718  00012718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000010  08002730  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002730  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000876d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fc  00000000  00000000  000287a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016852  00000000  00000000  0002b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a838  00000000  00000000  00041bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082303  00000000  00000000  0004c42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce72d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027cc  00000000  00000000  000ce780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080026e0 	.word	0x080026e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080026e0 	.word	0x080026e0

0800014c <display_init>:
	Display_Min10,
	Display_Hrs1,
	Display_Hrs10
}display;

void display_init(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	display_clear_all();
 8000150:	f000 f854 	bl	80001fc <display_clear_all>
//
//	HAL_GPIO_WritePin(GPIOB,Display_Min1_G_Pin,GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOA,Display_Min1_D_Pin|
//							Display_Min1_E_Pin,GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOC,Display_Min1_F_Pin,GPIO_PIN_RESET);
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <display_clear>:

void display_clear(display which_display){
 8000158:	b580      	push	{r7, lr}
 800015a:	b082      	sub	sp, #8
 800015c:	af00      	add	r7, sp, #0
 800015e:	4603      	mov	r3, r0
 8000160:	71fb      	strb	r3, [r7, #7]
	if(which_display == Display_Min1 )
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d111      	bne.n	800018c <display_clear+0x34>
	{
		HAL_GPIO_WritePin(GPIOB,Display_Min1_A_Pin|
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800016e:	4820      	ldr	r0, [pc, #128]	; (80001f0 <display_clear+0x98>)
 8000170:	f001 fa55 	bl	800161e <HAL_GPIO_WritePin>
								Display_Min1_B_Pin|
								Display_Min1_G_Pin,	GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA,Display_Min1_C_Pin|
 8000174:	2201      	movs	r2, #1
 8000176:	2107      	movs	r1, #7
 8000178:	481e      	ldr	r0, [pc, #120]	; (80001f4 <display_clear+0x9c>)
 800017a:	f001 fa50 	bl	800161e <HAL_GPIO_WritePin>
								Display_Min1_D_Pin|
								Display_Min1_E_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC,Display_Min1_F_Pin,GPIO_PIN_SET);
 800017e:	2201      	movs	r2, #1
 8000180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000184:	481c      	ldr	r0, [pc, #112]	; (80001f8 <display_clear+0xa0>)
 8000186:	f001 fa4a 	bl	800161e <HAL_GPIO_WritePin>
		return;
 800018a:	e02e      	b.n	80001ea <display_clear+0x92>
	}

	if(which_display == Display_Min10 ){
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d10b      	bne.n	80001aa <display_clear+0x52>
		HAL_GPIO_WritePin(GPIOB,Display_Min10_B_Pin|
 8000192:	2201      	movs	r2, #1
 8000194:	2160      	movs	r1, #96	; 0x60
 8000196:	4816      	ldr	r0, [pc, #88]	; (80001f0 <display_clear+0x98>)
 8000198:	f001 fa41 	bl	800161e <HAL_GPIO_WritePin>
								Display_Min10_A_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA,Display_Min10_C_Pin|
 800019c:	2201      	movs	r2, #1
 800019e:	f641 0138 	movw	r1, #6200	; 0x1838
 80001a2:	4814      	ldr	r0, [pc, #80]	; (80001f4 <display_clear+0x9c>)
 80001a4:	f001 fa3b 	bl	800161e <HAL_GPIO_WritePin>
								Display_Min10_F_Pin|
								Display_Min10_G_Pin|
								Display_Min10_D_Pin|
								Display_Min10_E_Pin,GPIO_PIN_SET);
		return;
 80001a8:	e01f      	b.n	80001ea <display_clear+0x92>
	}

	if(which_display == Display_Hrs1 ){
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	2b02      	cmp	r3, #2
 80001ae:	d10c      	bne.n	80001ca <display_clear+0x72>
		HAL_GPIO_WritePin(GPIOB,Display_Hrs1_E_Pin|
 80001b0:	2201      	movs	r2, #1
 80001b2:	f248 0101 	movw	r1, #32769	; 0x8001
 80001b6:	480e      	ldr	r0, [pc, #56]	; (80001f0 <display_clear+0x98>)
 80001b8:	f001 fa31 	bl	800161e <HAL_GPIO_WritePin>
								Display_Hrs1_G_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA,Display_Hrs1_A_Pin|
 80001bc:	2201      	movs	r2, #1
 80001be:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 80001c2:	480c      	ldr	r0, [pc, #48]	; (80001f4 <display_clear+0x9c>)
 80001c4:	f001 fa2b 	bl	800161e <HAL_GPIO_WritePin>
								Display_Hrs1_B_Pin|
								Display_Hrs1_F_Pin|
								Display_Hrs1_C_Pin|
								Display_Hrs1_D_Pin,GPIO_PIN_SET);
		return;
 80001c8:	e00f      	b.n	80001ea <display_clear+0x92>
	}

	if(which_display == Display_Hrs10 ){
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	2b03      	cmp	r3, #3
 80001ce:	d10c      	bne.n	80001ea <display_clear+0x92>
		HAL_GPIO_WritePin(GPIOB,Display_Hrs10_A_Pin|
 80001d0:	2201      	movs	r2, #1
 80001d2:	f647 4106 	movw	r1, #31750	; 0x7c06
 80001d6:	4806      	ldr	r0, [pc, #24]	; (80001f0 <display_clear+0x98>)
 80001d8:	f001 fa21 	bl	800161e <HAL_GPIO_WritePin>
								Display_Hrs10_C_Pin|
								Display_Hrs10_D_Pin|
								Display_Hrs10_E_Pin|
								Display_Hrs10_F_Pin|
								Display_Hrs10_G_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB,Display_Hrs10_G_Pin,GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e2:	4803      	ldr	r0, [pc, #12]	; (80001f0 <display_clear+0x98>)
 80001e4:	f001 fa1b 	bl	800161e <HAL_GPIO_WritePin>
		return;
 80001e8:	bf00      	nop
	}
}
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010c00 	.word	0x40010c00
 80001f4:	40010800 	.word	0x40010800
 80001f8:	40011000 	.word	0x40011000

080001fc <display_clear_all>:

void display_clear_all(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	display_clear(Display_Min1);
 8000200:	2000      	movs	r0, #0
 8000202:	f7ff ffa9 	bl	8000158 <display_clear>
	display_clear(Display_Min10);
 8000206:	2001      	movs	r0, #1
 8000208:	f7ff ffa6 	bl	8000158 <display_clear>
	display_clear(Display_Hrs1);
 800020c:	2002      	movs	r0, #2
 800020e:	f7ff ffa3 	bl	8000158 <display_clear>
	display_clear(Display_Hrs10);
 8000212:	2003      	movs	r0, #3
 8000214:	f7ff ffa0 	bl	8000158 <display_clear>
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}

0800021c <display_Min1>:

void display_Min1(uint8_t num){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	display_clear(Display_Min1);
 8000226:	2000      	movs	r0, #0
 8000228:	f7ff ff96 	bl	8000158 <display_clear>
	switch(num){
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	2b09      	cmp	r3, #9
 8000230:	f200 80b4 	bhi.w	800039c <display_Min1+0x180>
 8000234:	a201      	add	r2, pc, #4	; (adr r2, 800023c <display_Min1+0x20>)
 8000236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800023a:	bf00      	nop
 800023c:	08000265 	.word	0x08000265
 8000240:	08000289 	.word	0x08000289
 8000244:	080002a1 	.word	0x080002a1
 8000248:	080002b9 	.word	0x080002b9
 800024c:	080002d1 	.word	0x080002d1
 8000250:	080002f5 	.word	0x080002f5
 8000254:	08000319 	.word	0x08000319
 8000258:	0800033d 	.word	0x0800033d
 800025c:	08000355 	.word	0x08000355
 8000260:	08000379 	.word	0x08000379
		case 0:
			HAL_GPIO_WritePin(GPIOB,Display_Min1_B_Pin|
 8000264:	2200      	movs	r2, #0
 8000266:	f44f 7140 	mov.w	r1, #768	; 0x300
 800026a:	484e      	ldr	r0, [pc, #312]	; (80003a4 <display_Min1+0x188>)
 800026c:	f001 f9d7 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_A_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min1_C_Pin|
 8000270:	2200      	movs	r2, #0
 8000272:	2107      	movs	r1, #7
 8000274:	484c      	ldr	r0, [pc, #304]	; (80003a8 <display_Min1+0x18c>)
 8000276:	f001 f9d2 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_D_Pin|
									Display_Min1_E_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC,Display_Min1_F_Pin,GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000280:	484a      	ldr	r0, [pc, #296]	; (80003ac <display_Min1+0x190>)
 8000282:	f001 f9cc 	bl	800161e <HAL_GPIO_WritePin>
			break;
 8000286:	e089      	b.n	800039c <display_Min1+0x180>
		case 1:
			HAL_GPIO_WritePin(GPIOB,Display_Min1_B_Pin,GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800028e:	4845      	ldr	r0, [pc, #276]	; (80003a4 <display_Min1+0x188>)
 8000290:	f001 f9c5 	bl	800161e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,Display_Min1_C_Pin,GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2101      	movs	r1, #1
 8000298:	4843      	ldr	r0, [pc, #268]	; (80003a8 <display_Min1+0x18c>)
 800029a:	f001 f9c0 	bl	800161e <HAL_GPIO_WritePin>
			break;
 800029e:	e07d      	b.n	800039c <display_Min1+0x180>
		case 2:
			HAL_GPIO_WritePin(GPIOB,Display_Min1_A_Pin|
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 7160 	mov.w	r1, #896	; 0x380
 80002a6:	483f      	ldr	r0, [pc, #252]	; (80003a4 <display_Min1+0x188>)
 80002a8:	f001 f9b9 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_B_Pin|
									Display_Min1_G_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min1_E_Pin|
 80002ac:	2200      	movs	r2, #0
 80002ae:	2106      	movs	r1, #6
 80002b0:	483d      	ldr	r0, [pc, #244]	; (80003a8 <display_Min1+0x18c>)
 80002b2:	f001 f9b4 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_D_Pin,GPIO_PIN_RESET);
			break;
 80002b6:	e071      	b.n	800039c <display_Min1+0x180>
		case 3:
			HAL_GPIO_WritePin(GPIOB,Display_Min1_A_Pin|
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 7160 	mov.w	r1, #896	; 0x380
 80002be:	4839      	ldr	r0, [pc, #228]	; (80003a4 <display_Min1+0x188>)
 80002c0:	f001 f9ad 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_B_Pin|
									Display_Min1_G_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min1_C_Pin|
 80002c4:	2200      	movs	r2, #0
 80002c6:	2103      	movs	r1, #3
 80002c8:	4837      	ldr	r0, [pc, #220]	; (80003a8 <display_Min1+0x18c>)
 80002ca:	f001 f9a8 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_D_Pin,GPIO_PIN_RESET);
			break;
 80002ce:	e065      	b.n	800039c <display_Min1+0x180>
		case 4:
			HAL_GPIO_WritePin(GPIOB,Display_Min1_B_Pin|
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80002d6:	4833      	ldr	r0, [pc, #204]	; (80003a4 <display_Min1+0x188>)
 80002d8:	f001 f9a1 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_G_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min1_C_Pin,	GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	2101      	movs	r1, #1
 80002e0:	4831      	ldr	r0, [pc, #196]	; (80003a8 <display_Min1+0x18c>)
 80002e2:	f001 f99c 	bl	800161e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,Display_Min1_F_Pin,GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ec:	482f      	ldr	r0, [pc, #188]	; (80003ac <display_Min1+0x190>)
 80002ee:	f001 f996 	bl	800161e <HAL_GPIO_WritePin>
			break;
 80002f2:	e053      	b.n	800039c <display_Min1+0x180>
		case 5:
			HAL_GPIO_WritePin(GPIOB,Display_Min1_A_Pin|
 80002f4:	2200      	movs	r2, #0
 80002f6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80002fa:	482a      	ldr	r0, [pc, #168]	; (80003a4 <display_Min1+0x188>)
 80002fc:	f001 f98f 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_G_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min1_C_Pin|
 8000300:	2200      	movs	r2, #0
 8000302:	2103      	movs	r1, #3
 8000304:	4828      	ldr	r0, [pc, #160]	; (80003a8 <display_Min1+0x18c>)
 8000306:	f001 f98a 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_D_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC,Display_Min1_F_Pin,GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000310:	4826      	ldr	r0, [pc, #152]	; (80003ac <display_Min1+0x190>)
 8000312:	f001 f984 	bl	800161e <HAL_GPIO_WritePin>
			break;
 8000316:	e041      	b.n	800039c <display_Min1+0x180>
		case 6:
			HAL_GPIO_WritePin(GPIOB,Display_Min1_A_Pin|
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800031e:	4821      	ldr	r0, [pc, #132]	; (80003a4 <display_Min1+0x188>)
 8000320:	f001 f97d 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_G_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min1_C_Pin|
 8000324:	2200      	movs	r2, #0
 8000326:	2107      	movs	r1, #7
 8000328:	481f      	ldr	r0, [pc, #124]	; (80003a8 <display_Min1+0x18c>)
 800032a:	f001 f978 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_D_Pin|Display_Min1_E_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC,Display_Min1_F_Pin,GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000334:	481d      	ldr	r0, [pc, #116]	; (80003ac <display_Min1+0x190>)
 8000336:	f001 f972 	bl	800161e <HAL_GPIO_WritePin>
			break;
 800033a:	e02f      	b.n	800039c <display_Min1+0x180>
		case 7:
			HAL_GPIO_WritePin(GPIOB,Display_Min1_B_Pin|
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000342:	4818      	ldr	r0, [pc, #96]	; (80003a4 <display_Min1+0x188>)
 8000344:	f001 f96b 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_A_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min1_C_Pin,GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2101      	movs	r1, #1
 800034c:	4816      	ldr	r0, [pc, #88]	; (80003a8 <display_Min1+0x18c>)
 800034e:	f001 f966 	bl	800161e <HAL_GPIO_WritePin>
			break;
 8000352:	e023      	b.n	800039c <display_Min1+0x180>
		case 8:
			HAL_GPIO_WritePin(GPIOB,Display_Min1_B_Pin|
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 7160 	mov.w	r1, #896	; 0x380
 800035a:	4812      	ldr	r0, [pc, #72]	; (80003a4 <display_Min1+0x188>)
 800035c:	f001 f95f 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_A_Pin|
									Display_Min1_G_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min1_C_Pin|
 8000360:	2200      	movs	r2, #0
 8000362:	2107      	movs	r1, #7
 8000364:	4810      	ldr	r0, [pc, #64]	; (80003a8 <display_Min1+0x18c>)
 8000366:	f001 f95a 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_D_Pin|
									Display_Min1_E_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC,Display_Min1_F_Pin,GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000370:	480e      	ldr	r0, [pc, #56]	; (80003ac <display_Min1+0x190>)
 8000372:	f001 f954 	bl	800161e <HAL_GPIO_WritePin>
			break;
 8000376:	e011      	b.n	800039c <display_Min1+0x180>
		case 9:
			HAL_GPIO_WritePin(GPIOB,Display_Min1_B_Pin|
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800037e:	4809      	ldr	r0, [pc, #36]	; (80003a4 <display_Min1+0x188>)
 8000380:	f001 f94d 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_A_Pin|
									Display_Min1_G_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min1_C_Pin|
 8000384:	2200      	movs	r2, #0
 8000386:	2103      	movs	r1, #3
 8000388:	4807      	ldr	r0, [pc, #28]	; (80003a8 <display_Min1+0x18c>)
 800038a:	f001 f948 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min1_D_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC,Display_Min1_F_Pin,GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000394:	4805      	ldr	r0, [pc, #20]	; (80003ac <display_Min1+0x190>)
 8000396:	f001 f942 	bl	800161e <HAL_GPIO_WritePin>
			break;
 800039a:	bf00      	nop
	}
}
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	40010800 	.word	0x40010800
 80003ac:	40011000 	.word	0x40011000

080003b0 <display_Min10>:

void display_Min10(uint8_t num){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
	display_clear(Display_Min10);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff fecc 	bl	8000158 <display_clear>
	switch(num){
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	2b09      	cmp	r3, #9
 80003c4:	f200 808e 	bhi.w	80004e4 <display_Min10+0x134>
 80003c8:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <display_Min10+0x20>)
 80003ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ce:	bf00      	nop
 80003d0:	080003f9 	.word	0x080003f9
 80003d4:	08000411 	.word	0x08000411
 80003d8:	08000427 	.word	0x08000427
 80003dc:	0800043f 	.word	0x0800043f
 80003e0:	08000457 	.word	0x08000457
 80003e4:	0800046f 	.word	0x0800046f
 80003e8:	08000487 	.word	0x08000487
 80003ec:	0800049f 	.word	0x0800049f
 80003f0:	080004b5 	.word	0x080004b5
 80003f4:	080004cd 	.word	0x080004cd
		case 0:
			HAL_GPIO_WritePin(GPIOB,Display_Min10_B_Pin|
 80003f8:	2200      	movs	r2, #0
 80003fa:	2160      	movs	r1, #96	; 0x60
 80003fc:	483b      	ldr	r0, [pc, #236]	; (80004ec <display_Min10+0x13c>)
 80003fe:	f001 f90e 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_A_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min10_F_Pin|
 8000402:	2200      	movs	r2, #0
 8000404:	f640 0138 	movw	r1, #2104	; 0x838
 8000408:	4839      	ldr	r0, [pc, #228]	; (80004f0 <display_Min10+0x140>)
 800040a:	f001 f908 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_C_Pin|
									Display_Min10_D_Pin|
									Display_Min10_E_Pin,GPIO_PIN_RESET);
			break;
 800040e:	e069      	b.n	80004e4 <display_Min10+0x134>
		case 1:
			HAL_GPIO_WritePin(GPIOB,Display_Min10_B_Pin,GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	4835      	ldr	r0, [pc, #212]	; (80004ec <display_Min10+0x13c>)
 8000416:	f001 f902 	bl	800161e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,Display_Min10_C_Pin,GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2108      	movs	r1, #8
 800041e:	4834      	ldr	r0, [pc, #208]	; (80004f0 <display_Min10+0x140>)
 8000420:	f001 f8fd 	bl	800161e <HAL_GPIO_WritePin>
			break;
 8000424:	e05e      	b.n	80004e4 <display_Min10+0x134>
		case 2:
			HAL_GPIO_WritePin(GPIOB,Display_Min10_A_Pin|
 8000426:	2200      	movs	r2, #0
 8000428:	2160      	movs	r1, #96	; 0x60
 800042a:	4830      	ldr	r0, [pc, #192]	; (80004ec <display_Min10+0x13c>)
 800042c:	f001 f8f7 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_B_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min10_G_Pin|
 8000430:	2200      	movs	r2, #0
 8000432:	f241 0130 	movw	r1, #4144	; 0x1030
 8000436:	482e      	ldr	r0, [pc, #184]	; (80004f0 <display_Min10+0x140>)
 8000438:	f001 f8f1 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_E_Pin|
									Display_Min10_D_Pin,GPIO_PIN_RESET);
			break;
 800043c:	e052      	b.n	80004e4 <display_Min10+0x134>
		case 3:
			HAL_GPIO_WritePin(GPIOB,Display_Min10_A_Pin|
 800043e:	2200      	movs	r2, #0
 8000440:	2160      	movs	r1, #96	; 0x60
 8000442:	482a      	ldr	r0, [pc, #168]	; (80004ec <display_Min10+0x13c>)
 8000444:	f001 f8eb 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_B_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min10_G_Pin|
 8000448:	2200      	movs	r2, #0
 800044a:	f241 0118 	movw	r1, #4120	; 0x1018
 800044e:	4828      	ldr	r0, [pc, #160]	; (80004f0 <display_Min10+0x140>)
 8000450:	f001 f8e5 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_C_Pin|
									Display_Min10_D_Pin,GPIO_PIN_RESET);
			break;
 8000454:	e046      	b.n	80004e4 <display_Min10+0x134>
		case 4:
			HAL_GPIO_WritePin(GPIOB,Display_Min10_B_Pin,GPIO_PIN_RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2140      	movs	r1, #64	; 0x40
 800045a:	4824      	ldr	r0, [pc, #144]	; (80004ec <display_Min10+0x13c>)
 800045c:	f001 f8df 	bl	800161e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,Display_Min10_G_Pin|
 8000460:	2200      	movs	r2, #0
 8000462:	f641 0108 	movw	r1, #6152	; 0x1808
 8000466:	4822      	ldr	r0, [pc, #136]	; (80004f0 <display_Min10+0x140>)
 8000468:	f001 f8d9 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_F_Pin|
									Display_Min10_C_Pin,	GPIO_PIN_RESET);
			break;
 800046c:	e03a      	b.n	80004e4 <display_Min10+0x134>
		case 5:
			HAL_GPIO_WritePin(GPIOB,Display_Min10_A_Pin,GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2120      	movs	r1, #32
 8000472:	481e      	ldr	r0, [pc, #120]	; (80004ec <display_Min10+0x13c>)
 8000474:	f001 f8d3 	bl	800161e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,Display_Min10_G_Pin|
 8000478:	2200      	movs	r2, #0
 800047a:	f641 0118 	movw	r1, #6168	; 0x1818
 800047e:	481c      	ldr	r0, [pc, #112]	; (80004f0 <display_Min10+0x140>)
 8000480:	f001 f8cd 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_F_Pin|
									Display_Min10_C_Pin|
									Display_Min10_D_Pin,GPIO_PIN_RESET);
			break;
 8000484:	e02e      	b.n	80004e4 <display_Min10+0x134>
		case 6:
			HAL_GPIO_WritePin(GPIOB,Display_Min10_A_Pin,GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2120      	movs	r1, #32
 800048a:	4818      	ldr	r0, [pc, #96]	; (80004ec <display_Min10+0x13c>)
 800048c:	f001 f8c7 	bl	800161e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,Display_Min10_G_Pin|
 8000490:	2200      	movs	r2, #0
 8000492:	f641 0138 	movw	r1, #6200	; 0x1838
 8000496:	4816      	ldr	r0, [pc, #88]	; (80004f0 <display_Min10+0x140>)
 8000498:	f001 f8c1 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_F_Pin|
									Display_Min10_C_Pin|
									Display_Min10_D_Pin|
									Display_Min10_E_Pin,GPIO_PIN_RESET);
			break;
 800049c:	e022      	b.n	80004e4 <display_Min10+0x134>
		case 7:
			HAL_GPIO_WritePin(GPIOB,Display_Min10_B_Pin|
 800049e:	2200      	movs	r2, #0
 80004a0:	2160      	movs	r1, #96	; 0x60
 80004a2:	4812      	ldr	r0, [pc, #72]	; (80004ec <display_Min10+0x13c>)
 80004a4:	f001 f8bb 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_A_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min10_C_Pin,GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2108      	movs	r1, #8
 80004ac:	4810      	ldr	r0, [pc, #64]	; (80004f0 <display_Min10+0x140>)
 80004ae:	f001 f8b6 	bl	800161e <HAL_GPIO_WritePin>
			break;
 80004b2:	e017      	b.n	80004e4 <display_Min10+0x134>
		case 8:
			HAL_GPIO_WritePin(GPIOB,Display_Min10_B_Pin|
 80004b4:	2200      	movs	r2, #0
 80004b6:	2160      	movs	r1, #96	; 0x60
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <display_Min10+0x13c>)
 80004ba:	f001 f8b0 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_A_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min10_G_Pin|
 80004be:	2200      	movs	r2, #0
 80004c0:	f641 0138 	movw	r1, #6200	; 0x1838
 80004c4:	480a      	ldr	r0, [pc, #40]	; (80004f0 <display_Min10+0x140>)
 80004c6:	f001 f8aa 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_F_Pin|
									Display_Min10_C_Pin|
									Display_Min10_D_Pin|
									Display_Min10_E_Pin,GPIO_PIN_RESET);
			break;
 80004ca:	e00b      	b.n	80004e4 <display_Min10+0x134>
		case 9:
			HAL_GPIO_WritePin(GPIOB,Display_Min10_B_Pin|
 80004cc:	2200      	movs	r2, #0
 80004ce:	2160      	movs	r1, #96	; 0x60
 80004d0:	4806      	ldr	r0, [pc, #24]	; (80004ec <display_Min10+0x13c>)
 80004d2:	f001 f8a4 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_A_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Min10_G_Pin|
 80004d6:	2200      	movs	r2, #0
 80004d8:	f641 0118 	movw	r1, #6168	; 0x1818
 80004dc:	4804      	ldr	r0, [pc, #16]	; (80004f0 <display_Min10+0x140>)
 80004de:	f001 f89e 	bl	800161e <HAL_GPIO_WritePin>
									Display_Min10_F_Pin|
									Display_Min10_C_Pin|
									Display_Min10_D_Pin,GPIO_PIN_RESET);
			break;
 80004e2:	bf00      	nop
	}

}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40010c00 	.word	0x40010c00
 80004f0:	40010800 	.word	0x40010800

080004f4 <display_Hrs1>:

void display_Hrs1(uint8_t num){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	display_clear(Display_Hrs1);
 80004fe:	2002      	movs	r0, #2
 8000500:	f7ff fe2a 	bl	8000158 <display_clear>
	switch(num){
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b09      	cmp	r3, #9
 8000508:	f200 808d 	bhi.w	8000626 <display_Hrs1+0x132>
 800050c:	a201      	add	r2, pc, #4	; (adr r2, 8000514 <display_Hrs1+0x20>)
 800050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000512:	bf00      	nop
 8000514:	0800053d 	.word	0x0800053d
 8000518:	08000555 	.word	0x08000555
 800051c:	08000563 	.word	0x08000563
 8000520:	0800057d 	.word	0x0800057d
 8000524:	08000597 	.word	0x08000597
 8000528:	080005b1 	.word	0x080005b1
 800052c:	080005cb 	.word	0x080005cb
 8000530:	080005e5 	.word	0x080005e5
 8000534:	080005f3 	.word	0x080005f3
 8000538:	0800060d 	.word	0x0800060d
		case 0:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs1_E_Pin,GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2101      	movs	r1, #1
 8000540:	483b      	ldr	r0, [pc, #236]	; (8000630 <display_Hrs1+0x13c>)
 8000542:	f001 f86c 	bl	800161e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,Display_Hrs1_B_Pin|
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 800054c:	4839      	ldr	r0, [pc, #228]	; (8000634 <display_Hrs1+0x140>)
 800054e:	f001 f866 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_F_Pin|
									Display_Hrs1_A_Pin|
									Display_Hrs1_C_Pin|
									Display_Hrs1_D_Pin,GPIO_PIN_RESET);
			break;
 8000552:	e068      	b.n	8000626 <display_Hrs1+0x132>
		case 1:
			HAL_GPIO_WritePin(GPIOA,Display_Hrs1_B_Pin|
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800055a:	4836      	ldr	r0, [pc, #216]	; (8000634 <display_Hrs1+0x140>)
 800055c:	f001 f85f 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_C_Pin,GPIO_PIN_RESET);
			break;
 8000560:	e061      	b.n	8000626 <display_Hrs1+0x132>
		case 2:
			HAL_GPIO_WritePin(GPIOA,Display_Hrs1_A_Pin|
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 8000568:	4832      	ldr	r0, [pc, #200]	; (8000634 <display_Hrs1+0x140>)
 800056a:	f001 f858 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_B_Pin|
									Display_Hrs1_D_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB,Display_Hrs1_E_Pin|
 800056e:	2200      	movs	r2, #0
 8000570:	f248 0101 	movw	r1, #32769	; 0x8001
 8000574:	482e      	ldr	r0, [pc, #184]	; (8000630 <display_Hrs1+0x13c>)
 8000576:	f001 f852 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_G_Pin,GPIO_PIN_RESET);
			break;
 800057a:	e054      	b.n	8000626 <display_Hrs1+0x132>
		case 3:
			HAL_GPIO_WritePin(GPIOA,Display_Hrs1_A_Pin|
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
 8000582:	482c      	ldr	r0, [pc, #176]	; (8000634 <display_Hrs1+0x140>)
 8000584:	f001 f84b 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_C_Pin|
									Display_Hrs1_D_Pin|
									Display_Hrs1_B_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB,Display_Hrs1_G_Pin,GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058e:	4828      	ldr	r0, [pc, #160]	; (8000630 <display_Hrs1+0x13c>)
 8000590:	f001 f845 	bl	800161e <HAL_GPIO_WritePin>
			break;
 8000594:	e047      	b.n	8000626 <display_Hrs1+0x132>
		case 4:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs1_G_Pin,GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059c:	4824      	ldr	r0, [pc, #144]	; (8000630 <display_Hrs1+0x13c>)
 800059e:	f001 f83e 	bl	800161e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,Display_Hrs1_F_Pin|
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 80005a8:	4822      	ldr	r0, [pc, #136]	; (8000634 <display_Hrs1+0x140>)
 80005aa:	f001 f838 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_C_Pin|
									Display_Hrs1_B_Pin,GPIO_PIN_RESET);
			break;
 80005ae:	e03a      	b.n	8000626 <display_Hrs1+0x132>
		case 5:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs1_G_Pin	,GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b6:	481e      	ldr	r0, [pc, #120]	; (8000630 <display_Hrs1+0x13c>)
 80005b8:	f001 f831 	bl	800161e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,Display_Hrs1_A_Pin|
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80005c2:	481c      	ldr	r0, [pc, #112]	; (8000634 <display_Hrs1+0x140>)
 80005c4:	f001 f82b 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_F_Pin|
									Display_Hrs1_C_Pin|
									Display_Hrs1_D_Pin,GPIO_PIN_RESET);
			break;
 80005c8:	e02d      	b.n	8000626 <display_Hrs1+0x132>
		case 6:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs1_E_Pin|
 80005ca:	2200      	movs	r2, #0
 80005cc:	f248 0101 	movw	r1, #32769	; 0x8001
 80005d0:	4817      	ldr	r0, [pc, #92]	; (8000630 <display_Hrs1+0x13c>)
 80005d2:	f001 f824 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_G_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Hrs1_C_Pin|
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80005dc:	4815      	ldr	r0, [pc, #84]	; (8000634 <display_Hrs1+0x140>)
 80005de:	f001 f81e 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_A_Pin|
									Display_Hrs1_D_Pin|
									Display_Hrs1_F_Pin,GPIO_PIN_RESET);
			break;
 80005e2:	e020      	b.n	8000626 <display_Hrs1+0x132>
		case 7:
			HAL_GPIO_WritePin(GPIOA,Display_Hrs1_B_Pin|
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80005ea:	4812      	ldr	r0, [pc, #72]	; (8000634 <display_Hrs1+0x140>)
 80005ec:	f001 f817 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_A_Pin|
									Display_Hrs1_C_Pin,GPIO_PIN_RESET);
			break;
 80005f0:	e019      	b.n	8000626 <display_Hrs1+0x132>
		case 8:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs1_G_Pin|
 80005f2:	2200      	movs	r2, #0
 80005f4:	f248 0101 	movw	r1, #32769	; 0x8001
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <display_Hrs1+0x13c>)
 80005fa:	f001 f810 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_E_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA,Display_Hrs1_F_Pin|
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <display_Hrs1+0x140>)
 8000606:	f001 f80a 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_B_Pin|
									Display_Hrs1_A_Pin|
									Display_Hrs1_C_Pin|
									Display_Hrs1_D_Pin,GPIO_PIN_RESET);
			break;
 800060a:	e00c      	b.n	8000626 <display_Hrs1+0x132>
		case 9:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs1_G_Pin,GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <display_Hrs1+0x13c>)
 8000614:	f001 f803 	bl	800161e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,Display_Hrs1_F_Pin|
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <display_Hrs1+0x140>)
 8000620:	f000 fffd 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs1_B_Pin|
									Display_Hrs1_A_Pin|
									Display_Hrs1_C_Pin|
									Display_Hrs1_D_Pin,GPIO_PIN_RESET);
			break;
 8000624:	bf00      	nop

	}
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40010c00 	.word	0x40010c00
 8000634:	40010800 	.word	0x40010800

08000638 <display_Hrs10>:

void display_Hrs10(uint8_t num){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	display_clear(Display_Hrs10);
 8000642:	2003      	movs	r0, #3
 8000644:	f7ff fd88 	bl	8000158 <display_clear>
	switch(num){
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b09      	cmp	r3, #9
 800064c:	d85c      	bhi.n	8000708 <display_Hrs10+0xd0>
 800064e:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <display_Hrs10+0x1c>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	0800067d 	.word	0x0800067d
 8000658:	0800068b 	.word	0x0800068b
 800065c:	08000699 	.word	0x08000699
 8000660:	080006a7 	.word	0x080006a7
 8000664:	080006b5 	.word	0x080006b5
 8000668:	080006c3 	.word	0x080006c3
 800066c:	080006d1 	.word	0x080006d1
 8000670:	080006df 	.word	0x080006df
 8000674:	080006ed 	.word	0x080006ed
 8000678:	080006fb 	.word	0x080006fb
		case 0:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs10_B_Pin|
 800067c:	2200      	movs	r2, #0
 800067e:	f247 4106 	movw	r1, #29702	; 0x7406
 8000682:	4823      	ldr	r0, [pc, #140]	; (8000710 <display_Hrs10+0xd8>)
 8000684:	f000 ffcb 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs10_A_Pin|
									Display_Hrs10_C_Pin|
									Display_Hrs10_D_Pin|
									Display_Hrs10_E_Pin|
									Display_Hrs10_F_Pin,GPIO_PIN_RESET);
			break;
 8000688:	e03e      	b.n	8000708 <display_Hrs10+0xd0>
		case 1:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs10_B_Pin|
 800068a:	2200      	movs	r2, #0
 800068c:	f244 0102 	movw	r1, #16386	; 0x4002
 8000690:	481f      	ldr	r0, [pc, #124]	; (8000710 <display_Hrs10+0xd8>)
 8000692:	f000 ffc4 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs10_C_Pin,GPIO_PIN_RESET);
			break;
 8000696:	e037      	b.n	8000708 <display_Hrs10+0xd0>
		case 2:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs10_A_Pin|
 8000698:	2200      	movs	r2, #0
 800069a:	f646 4104 	movw	r1, #27652	; 0x6c04
 800069e:	481c      	ldr	r0, [pc, #112]	; (8000710 <display_Hrs10+0xd8>)
 80006a0:	f000 ffbd 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs10_B_Pin|
									Display_Hrs10_E_Pin|
									Display_Hrs10_D_Pin|
									Display_Hrs10_G_Pin,GPIO_PIN_RESET);

			break;
 80006a4:	e030      	b.n	8000708 <display_Hrs10+0xd0>
		case 3:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs10_A_Pin|
 80006a6:	2200      	movs	r2, #0
 80006a8:	f646 0106 	movw	r1, #26630	; 0x6806
 80006ac:	4818      	ldr	r0, [pc, #96]	; (8000710 <display_Hrs10+0xd8>)
 80006ae:	f000 ffb6 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs10_B_Pin|
									Display_Hrs10_G_Pin|
									Display_Hrs10_C_Pin|
									Display_Hrs10_D_Pin,GPIO_PIN_RESET);
			break;
 80006b2:	e029      	b.n	8000708 <display_Hrs10+0xd0>
		case 4:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs10_G_Pin|
 80006b4:	2200      	movs	r2, #0
 80006b6:	f645 0102 	movw	r1, #22530	; 0x5802
 80006ba:	4815      	ldr	r0, [pc, #84]	; (8000710 <display_Hrs10+0xd8>)
 80006bc:	f000 ffaf 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs10_F_Pin|
									Display_Hrs10_C_Pin|
									Display_Hrs10_B_Pin,GPIO_PIN_RESET);
			break;
 80006c0:	e022      	b.n	8000708 <display_Hrs10+0xd0>
		case 5:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs10_G_Pin|
 80006c2:	2200      	movs	r2, #0
 80006c4:	f643 0106 	movw	r1, #14342	; 0x3806
 80006c8:	4811      	ldr	r0, [pc, #68]	; (8000710 <display_Hrs10+0xd8>)
 80006ca:	f000 ffa8 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs10_A_Pin|
									Display_Hrs10_F_Pin|
									Display_Hrs10_C_Pin|
									Display_Hrs10_D_Pin,GPIO_PIN_RESET);
			break;
 80006ce:	e01b      	b.n	8000708 <display_Hrs10+0xd0>
		case 6:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs10_E_Pin|
 80006d0:	2200      	movs	r2, #0
 80006d2:	f643 4106 	movw	r1, #15366	; 0x3c06
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <display_Hrs10+0xd8>)
 80006d8:	f000 ffa1 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs10_G_Pin|
									Display_Hrs10_C_Pin|
									Display_Hrs10_A_Pin|
									Display_Hrs10_D_Pin|
									Display_Hrs10_F_Pin,GPIO_PIN_RESET);
			break;
 80006dc:	e014      	b.n	8000708 <display_Hrs10+0xd0>
		case 7:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs10_B_Pin|
 80006de:	2200      	movs	r2, #0
 80006e0:	f246 0102 	movw	r1, #24578	; 0x6002
 80006e4:	480a      	ldr	r0, [pc, #40]	; (8000710 <display_Hrs10+0xd8>)
 80006e6:	f000 ff9a 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs10_A_Pin|
									Display_Hrs10_C_Pin,GPIO_PIN_RESET);
			break;
 80006ea:	e00d      	b.n	8000708 <display_Hrs10+0xd0>
		case 8:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs10_E_Pin|
 80006ec:	2200      	movs	r2, #0
 80006ee:	f647 4106 	movw	r1, #31750	; 0x7c06
 80006f2:	4807      	ldr	r0, [pc, #28]	; (8000710 <display_Hrs10+0xd8>)
 80006f4:	f000 ff93 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs10_G_Pin|
									Display_Hrs10_B_Pin|
									Display_Hrs10_A_Pin|
									Display_Hrs10_C_Pin|
									Display_Hrs10_D_Pin,GPIO_PIN_RESET);
			break;
 80006f8:	e006      	b.n	8000708 <display_Hrs10+0xd0>
		case 9:
			HAL_GPIO_WritePin(GPIOB,Display_Hrs10_G_Pin|
 80006fa:	2200      	movs	r2, #0
 80006fc:	f647 0106 	movw	r1, #30726	; 0x7806
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <display_Hrs10+0xd8>)
 8000702:	f000 ff8c 	bl	800161e <HAL_GPIO_WritePin>
									Display_Hrs10_F_Pin|
									Display_Hrs10_B_Pin|
									Display_Hrs10_A_Pin|
									Display_Hrs10_C_Pin|
									Display_Hrs10_D_Pin,GPIO_PIN_RESET);
			break;
 8000706:	bf00      	nop
	}
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40010c00 	.word	0x40010c00

08000714 <Set_hour>:

void Set_hour(uint8_t Hrs , uint8_t Min){
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	460a      	mov	r2, r1
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	71bb      	strb	r3, [r7, #6]
	if(Hrs<24 && Min<60){
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b17      	cmp	r3, #23
 8000728:	d830      	bhi.n	800078c <Set_hour+0x78>
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	2b3b      	cmp	r3, #59	; 0x3b
 800072e:	d82d      	bhi.n	800078c <Set_hour+0x78>
		display_Hrs10(Hrs/10);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <Set_hour+0x80>)
 8000734:	fba2 2303 	umull	r2, r3, r2, r3
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff7b 	bl	8000638 <display_Hrs10>
		display_Hrs1(Hrs%10);
 8000742:	79fa      	ldrb	r2, [r7, #7]
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <Set_hour+0x80>)
 8000746:	fba3 1302 	umull	r1, r3, r3, r2
 800074a:	08d9      	lsrs	r1, r3, #3
 800074c:	460b      	mov	r3, r1
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	440b      	add	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fecb 	bl	80004f4 <display_Hrs1>
		display_Min10(Min/10);
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <Set_hour+0x80>)
 8000762:	fba2 2303 	umull	r2, r3, r2, r3
 8000766:	08db      	lsrs	r3, r3, #3
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fe20 	bl	80003b0 <display_Min10>
		display_Min1(Min%10);
 8000770:	79ba      	ldrb	r2, [r7, #6]
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <Set_hour+0x80>)
 8000774:	fba3 1302 	umull	r1, r3, r3, r2
 8000778:	08d9      	lsrs	r1, r3, #3
 800077a:	460b      	mov	r3, r1
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	440b      	add	r3, r1
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fd48 	bl	800021c <display_Min1>
	}
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	cccccccd 	.word	0xcccccccd

08000798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ac:	4b56      	ldr	r3, [pc, #344]	; (8000908 <MX_GPIO_Init+0x170>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a55      	ldr	r2, [pc, #340]	; (8000908 <MX_GPIO_Init+0x170>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b53      	ldr	r3, [pc, #332]	; (8000908 <MX_GPIO_Init+0x170>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0310 	and.w	r3, r3, #16
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c4:	4b50      	ldr	r3, [pc, #320]	; (8000908 <MX_GPIO_Init+0x170>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a4f      	ldr	r2, [pc, #316]	; (8000908 <MX_GPIO_Init+0x170>)
 80007ca:	f043 0320 	orr.w	r3, r3, #32
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b4d      	ldr	r3, [pc, #308]	; (8000908 <MX_GPIO_Init+0x170>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0320 	and.w	r3, r3, #32
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b4a      	ldr	r3, [pc, #296]	; (8000908 <MX_GPIO_Init+0x170>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a49      	ldr	r2, [pc, #292]	; (8000908 <MX_GPIO_Init+0x170>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b47      	ldr	r3, [pc, #284]	; (8000908 <MX_GPIO_Init+0x170>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b44      	ldr	r3, [pc, #272]	; (8000908 <MX_GPIO_Init+0x170>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a43      	ldr	r2, [pc, #268]	; (8000908 <MX_GPIO_Init+0x170>)
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b41      	ldr	r3, [pc, #260]	; (8000908 <MX_GPIO_Init+0x170>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0308 	and.w	r3, r3, #8
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Display_Min1_F_GPIO_Port, Display_Min1_F_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000812:	483e      	ldr	r0, [pc, #248]	; (800090c <MX_GPIO_Init+0x174>)
 8000814:	f000 ff03 	bl	800161e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_LED2_GPIO_Port, LED1_LED2_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2102      	movs	r1, #2
 800081c:	483c      	ldr	r0, [pc, #240]	; (8000910 <MX_GPIO_Init+0x178>)
 800081e:	f000 fefe 	bl	800161e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Display_Min1_C_Pin|Display_Min1_D_Pin|Display_Min1_E_Pin|Display_Min10_C_Pin
 8000822:	2200      	movs	r2, #0
 8000824:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000828:	483a      	ldr	r0, [pc, #232]	; (8000914 <MX_GPIO_Init+0x17c>)
 800082a:	f000 fef8 	bl	800161e <HAL_GPIO_WritePin>
                          |Display_Min10_D_Pin|Display_Min10_E_Pin|Display_Hrs1_C_Pin|Display_Hrs1_D_Pin
                          |Display_Hrs1_F_Pin|Display_Hrs1_A_Pin|Display_Hrs1_B_Pin|Display_Min10_F_Pin
                          |Display_Min10_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_Hrs1_E_Pin|Display_Hrs10_C_Pin|Display_Hrs10_D_Pin|Display_Hrs10_E_Pin
 800082e:	2200      	movs	r2, #0
 8000830:	f64f 71e7 	movw	r1, #65511	; 0xffe7
 8000834:	4838      	ldr	r0, [pc, #224]	; (8000918 <MX_GPIO_Init+0x180>)
 8000836:	f000 fef2 	bl	800161e <HAL_GPIO_WritePin>
                          |Display_Hrs10_G_Pin|Display_Hrs10_F_Pin|Display_Hrs10_A_Pin|Display_Hrs10_B_Pin
                          |Display_Hrs1_G_Pin|Display_Min10_A_Pin|Display_Min10_B_Pin|Display_Min1_G_Pin
                          |Display_Min1_A_Pin|Display_Min1_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Display_Min1_F_Pin;
 800083a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Display_Min1_F_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	482e      	ldr	r0, [pc, #184]	; (800090c <MX_GPIO_Init+0x174>)
 8000854:	f000 fd50 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_TRIGGER_Pin;
 8000858:	2301      	movs	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000860:	2301      	movs	r3, #1
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4829      	ldr	r0, [pc, #164]	; (8000910 <MX_GPIO_Init+0x178>)
 800086c:	f000 fd44 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_LED2_Pin;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_LED2_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4822      	ldr	r0, [pc, #136]	; (8000910 <MX_GPIO_Init+0x178>)
 8000888:	f000 fd36 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Display_Min1_C_Pin|Display_Min1_D_Pin|Display_Min1_E_Pin|Display_Min10_C_Pin
 800088c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000890:	617b      	str	r3, [r7, #20]
                          |Display_Min10_D_Pin|Display_Min10_E_Pin|Display_Hrs1_C_Pin|Display_Hrs1_D_Pin
                          |Display_Hrs1_F_Pin|Display_Hrs1_A_Pin|Display_Hrs1_B_Pin|Display_Min10_F_Pin
                          |Display_Min10_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	481b      	ldr	r0, [pc, #108]	; (8000914 <MX_GPIO_Init+0x17c>)
 80008a6:	f000 fd27 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = Display_Hrs1_E_Pin|Display_Hrs10_C_Pin|Display_Hrs10_D_Pin|Display_Hrs10_E_Pin
 80008aa:	f64f 73e7 	movw	r3, #65511	; 0xffe7
 80008ae:	617b      	str	r3, [r7, #20]
                          |Display_Hrs10_G_Pin|Display_Hrs10_F_Pin|Display_Hrs10_A_Pin|Display_Hrs10_B_Pin
                          |Display_Hrs1_G_Pin|Display_Min10_A_Pin|Display_Min10_B_Pin|Display_Min1_G_Pin
                          |Display_Min1_A_Pin|Display_Min1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4815      	ldr	r0, [pc, #84]	; (8000918 <MX_GPIO_Init+0x180>)
 80008c4:	f000 fd18 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW3_MODE_CLEAR_Pin;
 80008c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_MODE_CLEAR_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_GPIO_Init+0x17c>)
 80008de:	f000 fd0b 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_GPIO_Init+0x184>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
 80008f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
 80008f8:	4a08      	ldr	r2, [pc, #32]	; (800091c <MX_GPIO_Init+0x184>)
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	6053      	str	r3, [r2, #4]

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000
 800090c:	40011000 	.word	0x40011000
 8000910:	40011400 	.word	0x40011400
 8000914:	40010800 	.word	0x40010800
 8000918:	40010c00 	.word	0x40010c00
 800091c:	40010000 	.word	0x40010000

08000920 <timer_cnt_diff>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool mode = CLOCK;
uint8_t Hrs_ = 0, Min_ = 0;

uint16_t timer_cnt_diff(TIM_HandleTypeDef *htim,uint16_t cnt_val_1,uint16_t cnt_val_2){
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	807b      	strh	r3, [r7, #2]
 800092c:	4613      	mov	r3, r2
 800092e:	803b      	strh	r3, [r7, #0]
	if(cnt_val_2 > cnt_val_1)
 8000930:	883a      	ldrh	r2, [r7, #0]
 8000932:	887b      	ldrh	r3, [r7, #2]
 8000934:	429a      	cmp	r2, r3
 8000936:	d904      	bls.n	8000942 <timer_cnt_diff+0x22>
		return (cnt_val_2 - cnt_val_1);
 8000938:	883a      	ldrh	r2, [r7, #0]
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	b29b      	uxth	r3, r3
 8000940:	e00e      	b.n	8000960 <timer_cnt_diff+0x40>
	else if (cnt_val_2 < cnt_val_1)
 8000942:	883a      	ldrh	r2, [r7, #0]
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	429a      	cmp	r2, r3
 8000948:	d20a      	bcs.n	8000960 <timer_cnt_diff+0x40>
		return (__HAL_TIM_GET_AUTORELOAD(htim)  - cnt_val_1 + cnt_val_2);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000950:	b29a      	uxth	r2, r3
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	b29a      	uxth	r2, r3
 8000958:	883b      	ldrh	r3, [r7, #0]
 800095a:	4413      	add	r3, r2
 800095c:	b29b      	uxth	r3, r3
 800095e:	e7ff      	b.n	8000960 <timer_cnt_diff+0x40>
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
	...

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f000 fb51 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 f897 	bl	8000aa8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f7ff ff0d 	bl	8000798 <MX_GPIO_Init>
  MX_TIM2_Init();
 800097e:	f000 fa2d 	bl	8000ddc <MX_TIM2_Init>
  MX_TIM1_Init();
 8000982:	f000 f9d9 	bl	8000d38 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000986:	f000 fa77 	bl	8000e78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  display_init();
 800098a:	f7ff fbdf 	bl	800014c <display_init>
  HAL_TIM_Base_Start_IT(&htim1);
 800098e:	483e      	ldr	r0, [pc, #248]	; (8000a88 <main+0x11c>)
 8000990:	f001 faae 	bl	8001ef0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000994:	483d      	ldr	r0, [pc, #244]	; (8000a8c <main+0x120>)
 8000996:	f001 faab 	bl	8001ef0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((HAL_GPIO_ReadPin(GPIOD,SW1_TRIGGER_Pin) == 0) && mode == TIMER)
 800099a:	2101      	movs	r1, #1
 800099c:	483c      	ldr	r0, [pc, #240]	; (8000a90 <main+0x124>)
 800099e:	f000 fe27 	bl	80015f0 <HAL_GPIO_ReadPin>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d107      	bne.n	80009b8 <main+0x4c>
 80009a8:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <main+0x128>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <main+0x4c>
			  HAL_TIM_Base_Start_IT(&htim2);
 80009b0:	4839      	ldr	r0, [pc, #228]	; (8000a98 <main+0x12c>)
 80009b2:	f001 fa9d 	bl	8001ef0 <HAL_TIM_Base_Start_IT>
 80009b6:	e00d      	b.n	80009d4 <main+0x68>
	  else if( (HAL_GPIO_ReadPin(GPIOD,SW1_TRIGGER_Pin) == 1) && mode == TIMER){
 80009b8:	2101      	movs	r1, #1
 80009ba:	4835      	ldr	r0, [pc, #212]	; (8000a90 <main+0x124>)
 80009bc:	f000 fe18 	bl	80015f0 <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d106      	bne.n	80009d4 <main+0x68>
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <main+0x128>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <main+0x68>
		  	  HAL_TIM_Base_Stop_IT(&htim2);
 80009ce:	4832      	ldr	r0, [pc, #200]	; (8000a98 <main+0x12c>)
 80009d0:	f001 fada 	bl	8001f88 <HAL_TIM_Base_Stop_IT>
	  }
	  if(HAL_GPIO_ReadPin(GPIOA,SW3_MODE_CLEAR_Pin) == 0)
 80009d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d8:	4830      	ldr	r0, [pc, #192]	; (8000a9c <main+0x130>)
 80009da:	f000 fe09 	bl	80015f0 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1da      	bne.n	800099a <main+0x2e>
	  {
		  temp = __HAL_TIM_GET_COUNTER(&htim1);
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <main+0x11c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	80fb      	strh	r3, [r7, #6]
		  if(mode == TIMER )
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <main+0x128>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d03d      	beq.n	8000a70 <main+0x104>
		  {
			Set_hour(0,0);
 80009f4:	2100      	movs	r1, #0
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff fe8c 	bl	8000714 <Set_hour>
			Hrs_ = 0;
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <main+0x134>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
			Min_ = 0;
 8000a02:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <main+0x138>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
		  }
		  while(HAL_GPIO_ReadPin(GPIOA,SW3_MODE_CLEAR_Pin) == 0 )
 8000a08:	e032      	b.n	8000a70 <main+0x104>
		  {
			  var = timer_cnt_diff(&htim1,temp,__HAL_TIM_GET_COUNTER(&htim1));
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <main+0x11c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	4619      	mov	r1, r3
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <main+0x11c>)
 8000a18:	f7ff ff82 	bl	8000920 <timer_cnt_diff>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	80bb      	strh	r3, [r7, #4]
			  if( var >= 800 && var <=803)
 8000a20:	88bb      	ldrh	r3, [r7, #4]
 8000a22:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000a26:	d323      	bcc.n	8000a70 <main+0x104>
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	f5b3 7f49 	cmp.w	r3, #804	; 0x324
 8000a2e:	d21f      	bcs.n	8000a70 <main+0x104>
			  {
				display_clear_all();
 8000a30:	f7ff fbe4 	bl	80001fc <display_clear_all>
				mode = !mode;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <main+0x128>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f083 0301 	eor.w	r3, r3, #1
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <main+0x128>)
 8000a50:	701a      	strb	r2, [r3, #0]
				if(mode == TIMER)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <main+0x128>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d013      	beq.n	8000a82 <main+0x116>
				{
					Set_hour(0,0);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fe59 	bl	8000714 <Set_hour>
					Hrs_ = 0;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <main+0x134>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
					Min_ = 0;
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <main+0x138>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000a6e:	e008      	b.n	8000a82 <main+0x116>
		  while(HAL_GPIO_ReadPin(GPIOA,SW3_MODE_CLEAR_Pin) == 0 )
 8000a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <main+0x130>)
 8000a76:	f000 fdbb 	bl	80015f0 <HAL_GPIO_ReadPin>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0c4      	beq.n	8000a0a <main+0x9e>
 8000a80:	e78b      	b.n	800099a <main+0x2e>
				break;
 8000a82:	bf00      	nop
	  if((HAL_GPIO_ReadPin(GPIOD,SW1_TRIGGER_Pin) == 0) && mode == TIMER)
 8000a84:	e789      	b.n	800099a <main+0x2e>
 8000a86:	bf00      	nop
 8000a88:	20000030 	.word	0x20000030
 8000a8c:	200000c0 	.word	0x200000c0
 8000a90:	40011400 	.word	0x40011400
 8000a94:	2000002c 	.word	0x2000002c
 8000a98:	20000078 	.word	0x20000078
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	2000002d 	.word	0x2000002d
 8000aa4:	2000002e 	.word	0x2000002e

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b090      	sub	sp, #64	; 0x40
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	2228      	movs	r2, #40	; 0x28
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fe0a 	bl	80026d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000ade:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fdc9 	bl	8001680 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000af4:	f000 f818 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2302      	movs	r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 f837 	bl	8001b84 <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b1c:	f000 f804 	bl	8000b28 <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3740      	adds	r7, #64	; 0x40
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_MspInit+0x40>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_MspInit+0x40>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6193      	str	r3, [r2, #24]
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_MspInit+0x40>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_MspInit+0x40>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_MspInit+0x40>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	61d3      	str	r3, [r2, #28]
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_MspInit+0x40>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	40021000 	.word	0x40021000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr

08000bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbe:	f000 fa71 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM1_UP_IRQHandler+0x10>)
 8000bce:	f001 fa09 	bl	8001fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000030 	.word	0x20000030

08000bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <TIM2_IRQHandler+0x1c>)
 8000be2:	f001 f9ff 	bl	8001fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOD,LED1_LED2_Pin);
 8000be6:	2102      	movs	r1, #2
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <TIM2_IRQHandler+0x20>)
 8000bea:	f000 fd30 	bl	800164e <HAL_GPIO_TogglePin>
  timer_mode();
 8000bee:	f000 f86f 	bl	8000cd0 <timer_mode>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000078 	.word	0x20000078
 8000bfc:	40011400 	.word	0x40011400

08000c00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c04:	4808      	ldr	r0, [pc, #32]	; (8000c28 <TIM3_IRQHandler+0x28>)
 8000c06:	f001 f9ed 	bl	8001fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  clock_mode();
 8000c0a:	f000 f813 	bl	8000c34 <clock_mode>
  if(mode == CLOCK)
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <TIM3_IRQHandler+0x2c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	f083 0301 	eor.w	r3, r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <TIM3_IRQHandler+0x24>
	  HAL_GPIO_TogglePin(GPIOD,LED1_LED2_Pin);
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <TIM3_IRQHandler+0x30>)
 8000c20:	f000 fd15 	bl	800164e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000c0 	.word	0x200000c0
 8000c2c:	2000002c 	.word	0x2000002c
 8000c30:	40011400 	.word	0x40011400

08000c34 <clock_mode>:

/* USER CODE BEGIN 1 */
void clock_mode(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  static uint8_t Hrs = 12, Min = 36,Sec=0;
  if(mode == CLOCK)
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <clock_mode+0x8c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <clock_mode+0x22>
	  Set_hour(Hrs,Min);
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <clock_mode+0x90>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	; (8000cc8 <clock_mode+0x94>)
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fd5f 	bl	8000714 <Set_hour>
  Sec++;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <clock_mode+0x98>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <clock_mode+0x98>)
 8000c60:	701a      	strb	r2, [r3, #0]
  if(Sec==60 && Min<60 && Hrs<24){
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <clock_mode+0x98>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b3c      	cmp	r3, #60	; 0x3c
 8000c68:	d129      	bne.n	8000cbe <clock_mode+0x8a>
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <clock_mode+0x94>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b3b      	cmp	r3, #59	; 0x3b
 8000c70:	d825      	bhi.n	8000cbe <clock_mode+0x8a>
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <clock_mode+0x90>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b17      	cmp	r3, #23
 8000c78:	d821      	bhi.n	8000cbe <clock_mode+0x8a>
	  Sec=0;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <clock_mode+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
  	  Min++;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <clock_mode+0x94>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <clock_mode+0x94>)
 8000c8a:	701a      	strb	r2, [r3, #0]
	  if(Min==60 && Hrs<24){
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <clock_mode+0x94>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b3c      	cmp	r3, #60	; 0x3c
 8000c92:	d114      	bne.n	8000cbe <clock_mode+0x8a>
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <clock_mode+0x90>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b17      	cmp	r3, #23
 8000c9a:	d810      	bhi.n	8000cbe <clock_mode+0x8a>
		Min = 0;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <clock_mode+0x94>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
		Hrs++;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <clock_mode+0x90>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <clock_mode+0x90>)
 8000cac:	701a      	strb	r2, [r3, #0]
		if(Hrs==24){
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <clock_mode+0x90>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b18      	cmp	r3, #24
 8000cb4:	d103      	bne.n	8000cbe <clock_mode+0x8a>
			Hrs=0;
 8000cb6:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <clock_mode+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
			return;
 8000cbc:	bf00      	nop
		}
	  }
  }
}
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000002c 	.word	0x2000002c
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000001 	.word	0x20000001
 8000ccc:	2000002f 	.word	0x2000002f

08000cd0 <timer_mode>:

void timer_mode(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  Set_hour(Hrs_,Min_);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <timer_mode+0x54>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <timer_mode+0x58>)
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd18 	bl	8000714 <Set_hour>
  Min_++;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <timer_mode+0x58>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <timer_mode+0x58>)
 8000cee:	701a      	strb	r2, [r3, #0]
  if(Min_==60 && Hrs_<=24){
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <timer_mode+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b3c      	cmp	r3, #60	; 0x3c
 8000cf6:	d114      	bne.n	8000d22 <timer_mode+0x52>
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <timer_mode+0x54>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b18      	cmp	r3, #24
 8000cfe:	d810      	bhi.n	8000d22 <timer_mode+0x52>
	Min_ = 0;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <timer_mode+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
	Hrs_++;
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <timer_mode+0x54>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <timer_mode+0x54>)
 8000d10:	701a      	strb	r2, [r3, #0]
	if(Hrs_==24){
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <timer_mode+0x54>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b18      	cmp	r3, #24
 8000d18:	d103      	bne.n	8000d22 <timer_mode+0x52>
		Hrs_=0;
 8000d1a:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <timer_mode+0x54>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
		return;
 8000d20:	bf00      	nop
	}
  }
}
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000002d 	.word	0x2000002d
 8000d28:	2000002e 	.word	0x2000002e

08000d2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_TIM1_Init+0x9c>)
 8000d56:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000-1;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_TIM1_Init+0x9c>)
 8000d5c:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000d60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_TIM1_Init+0x9c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 900-1;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_TIM1_Init+0x9c>)
 8000d6a:	f240 3283 	movw	r2, #899	; 0x383
 8000d6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_TIM1_Init+0x9c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_TIM1_Init+0x9c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_TIM1_Init+0x9c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d82:	4814      	ldr	r0, [pc, #80]	; (8000dd4 <MX_TIM1_Init+0x9c>)
 8000d84:	f001 f864 	bl	8001e50 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d8e:	f7ff fecb 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_TIM1_Init+0x9c>)
 8000da0:	f001 fa28 	bl	80021f4 <HAL_TIM_ConfigClockSource>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000daa:	f7ff febd 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_TIM1_Init+0x9c>)
 8000dbc:	f001 fbfa 	bl	80025b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000dc6:	f7ff feaf 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000030 	.word	0x20000030
 8000dd8:	40012c00 	.word	0x40012c00

08000ddc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_TIM2_Init+0x98>)
 8000dfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_TIM2_Init+0x98>)
 8000e02:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000e06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_TIM2_Init+0x98>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_TIM2_Init+0x98>)
 8000e10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_TIM2_Init+0x98>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_TIM2_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e22:	4814      	ldr	r0, [pc, #80]	; (8000e74 <MX_TIM2_Init+0x98>)
 8000e24:	f001 f814 	bl	8001e50 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e2e:	f7ff fe7b 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_TIM2_Init+0x98>)
 8000e40:	f001 f9d8 	bl	80021f4 <HAL_TIM_ConfigClockSource>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e4a:	f7ff fe6d 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <MX_TIM2_Init+0x98>)
 8000e5c:	f001 fbaa 	bl	80025b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e66:	f7ff fe5f 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000078 	.word	0x20000078

08000e78 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_TIM3_Init+0x94>)
 8000e96:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <MX_TIM3_Init+0x98>)
 8000e98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000-1;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_TIM3_Init+0x94>)
 8000e9c:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ea0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_TIM3_Init+0x94>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_TIM3_Init+0x94>)
 8000eaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_TIM3_Init+0x94>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_TIM3_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <MX_TIM3_Init+0x94>)
 8000ebe:	f000 ffc7 	bl	8001e50 <HAL_TIM_Base_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ec8:	f7ff fe2e 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <MX_TIM3_Init+0x94>)
 8000eda:	f001 f98b 	bl	80021f4 <HAL_TIM_ConfigClockSource>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ee4:	f7ff fe20 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_TIM3_Init+0x94>)
 8000ef6:	f001 fb5d 	bl	80025b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f00:	f7ff fe12 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000c0 	.word	0x200000c0
 8000f10:	40000400 	.word	0x40000400

08000f14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a27      	ldr	r2, [pc, #156]	; (8000fc0 <HAL_TIM_Base_MspInit+0xac>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d114      	bne.n	8000f50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f26:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_TIM_Base_MspInit+0xb0>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4a26      	ldr	r2, [pc, #152]	; (8000fc4 <HAL_TIM_Base_MspInit+0xb0>)
 8000f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f30:	6193      	str	r3, [r2, #24]
 8000f32:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <HAL_TIM_Base_MspInit+0xb0>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2101      	movs	r1, #1
 8000f42:	2019      	movs	r0, #25
 8000f44:	f000 f9a1 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f48:	2019      	movs	r0, #25
 8000f4a:	f000 f9ba 	bl	80012c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f4e:	e032      	b.n	8000fb6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f58:	d114      	bne.n	8000f84 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_TIM_Base_MspInit+0xb0>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_TIM_Base_MspInit+0xb0>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_TIM_Base_MspInit+0xb0>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2102      	movs	r1, #2
 8000f76:	201c      	movs	r0, #28
 8000f78:	f000 f987 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f7c:	201c      	movs	r0, #28
 8000f7e:	f000 f9a0 	bl	80012c2 <HAL_NVIC_EnableIRQ>
}
 8000f82:	e018      	b.n	8000fb6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_TIM_Base_MspInit+0xb4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d113      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_TIM_Base_MspInit+0xb0>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <HAL_TIM_Base_MspInit+0xb0>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_TIM_Base_MspInit+0xb0>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201d      	movs	r0, #29
 8000fac:	f000 f96d 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fb0:	201d      	movs	r0, #29
 8000fb2:	f000 f986 	bl	80012c2 <HAL_NVIC_EnableIRQ>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012c00 	.word	0x40012c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40000400 	.word	0x40000400

08000fcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	; (8001004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	; (8001010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ff2:	f7ff fe9b 	bl	8000d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f001 fb47 	bl	8002688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ffa:	f7ff fcb7 	bl	800096c <main>
  bx lr
 8000ffe:	4770      	bx	lr
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001008:	08002720 	.word	0x08002720
  ldr r2, =_sbss
 800100c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001010:	2000010c 	.word	0x2000010c

08001014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC1_2_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_Init+0x28>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_Init+0x28>)
 8001022:	f043 0310 	orr.w	r3, r3, #16
 8001026:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 f923 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102e:	200f      	movs	r0, #15
 8001030:	f000 f808 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff fd7e 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40022000 	.word	0x40022000

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x54>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_InitTick+0x58>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f93b 	bl	80012de <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e00e      	b.n	8001090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d80a      	bhi.n	800108e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f000 f903 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <HAL_InitTick+0x5c>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000004 	.word	0x20000004
 800109c:	2000000c 	.word	0x2000000c
 80010a0:	20000008 	.word	0x20000008

080010a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_IncTick+0x1c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_IncTick+0x20>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <HAL_IncTick+0x20>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000108 	.word	0x20000108

080010c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <HAL_GetTick+0x10>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	20000108 	.word	0x20000108

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4906      	ldr	r1, [pc, #24]	; (8001174 <__NVIC_EnableIRQ+0x34>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff90 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff2d 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff42 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff90 	bl	80011cc <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5f 	bl	8001178 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff35 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa2 	bl	8001230 <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b08b      	sub	sp, #44	; 0x2c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	e161      	b.n	80015d0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800130c:	2201      	movs	r2, #1
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	429a      	cmp	r2, r3
 8001326:	f040 8150 	bne.w	80015ca <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a97      	ldr	r2, [pc, #604]	; (800158c <HAL_GPIO_Init+0x294>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d05e      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001334:	4a95      	ldr	r2, [pc, #596]	; (800158c <HAL_GPIO_Init+0x294>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d875      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 800133a:	4a95      	ldr	r2, [pc, #596]	; (8001590 <HAL_GPIO_Init+0x298>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d058      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001340:	4a93      	ldr	r2, [pc, #588]	; (8001590 <HAL_GPIO_Init+0x298>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d86f      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 8001346:	4a93      	ldr	r2, [pc, #588]	; (8001594 <HAL_GPIO_Init+0x29c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d052      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 800134c:	4a91      	ldr	r2, [pc, #580]	; (8001594 <HAL_GPIO_Init+0x29c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d869      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 8001352:	4a91      	ldr	r2, [pc, #580]	; (8001598 <HAL_GPIO_Init+0x2a0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d04c      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001358:	4a8f      	ldr	r2, [pc, #572]	; (8001598 <HAL_GPIO_Init+0x2a0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d863      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 800135e:	4a8f      	ldr	r2, [pc, #572]	; (800159c <HAL_GPIO_Init+0x2a4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d046      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001364:	4a8d      	ldr	r2, [pc, #564]	; (800159c <HAL_GPIO_Init+0x2a4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d85d      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 800136a:	2b12      	cmp	r3, #18
 800136c:	d82a      	bhi.n	80013c4 <HAL_GPIO_Init+0xcc>
 800136e:	2b12      	cmp	r3, #18
 8001370:	d859      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <HAL_GPIO_Init+0x80>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	080013f3 	.word	0x080013f3
 800137c:	080013cd 	.word	0x080013cd
 8001380:	080013df 	.word	0x080013df
 8001384:	08001421 	.word	0x08001421
 8001388:	08001427 	.word	0x08001427
 800138c:	08001427 	.word	0x08001427
 8001390:	08001427 	.word	0x08001427
 8001394:	08001427 	.word	0x08001427
 8001398:	08001427 	.word	0x08001427
 800139c:	08001427 	.word	0x08001427
 80013a0:	08001427 	.word	0x08001427
 80013a4:	08001427 	.word	0x08001427
 80013a8:	08001427 	.word	0x08001427
 80013ac:	08001427 	.word	0x08001427
 80013b0:	08001427 	.word	0x08001427
 80013b4:	08001427 	.word	0x08001427
 80013b8:	08001427 	.word	0x08001427
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	080013e9 	.word	0x080013e9
 80013c4:	4a76      	ldr	r2, [pc, #472]	; (80015a0 <HAL_GPIO_Init+0x2a8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ca:	e02c      	b.n	8001426 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	623b      	str	r3, [r7, #32]
          break;
 80013d2:	e029      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	3304      	adds	r3, #4
 80013da:	623b      	str	r3, [r7, #32]
          break;
 80013dc:	e024      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	3308      	adds	r3, #8
 80013e4:	623b      	str	r3, [r7, #32]
          break;
 80013e6:	e01f      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	330c      	adds	r3, #12
 80013ee:	623b      	str	r3, [r7, #32]
          break;
 80013f0:	e01a      	b.n	8001428 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013fa:	2304      	movs	r3, #4
 80013fc:	623b      	str	r3, [r7, #32]
          break;
 80013fe:	e013      	b.n	8001428 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d105      	bne.n	8001414 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001408:	2308      	movs	r3, #8
 800140a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	611a      	str	r2, [r3, #16]
          break;
 8001412:	e009      	b.n	8001428 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001414:	2308      	movs	r3, #8
 8001416:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	615a      	str	r2, [r3, #20]
          break;
 800141e:	e003      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
          break;
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x130>
          break;
 8001426:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2bff      	cmp	r3, #255	; 0xff
 800142c:	d801      	bhi.n	8001432 <HAL_GPIO_Init+0x13a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	e001      	b.n	8001436 <HAL_GPIO_Init+0x13e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3304      	adds	r3, #4
 8001436:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2bff      	cmp	r3, #255	; 0xff
 800143c:	d802      	bhi.n	8001444 <HAL_GPIO_Init+0x14c>
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	e002      	b.n	800144a <HAL_GPIO_Init+0x152>
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	3b08      	subs	r3, #8
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	210f      	movs	r1, #15
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	401a      	ands	r2, r3
 800145c:	6a39      	ldr	r1, [r7, #32]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	431a      	orrs	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80a9 	beq.w	80015ca <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001478:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <HAL_GPIO_Init+0x2ac>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <HAL_GPIO_Init+0x2ac>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_GPIO_Init+0x2ac>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001490:	4a45      	ldr	r2, [pc, #276]	; (80015a8 <HAL_GPIO_Init+0x2b0>)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a3d      	ldr	r2, [pc, #244]	; (80015ac <HAL_GPIO_Init+0x2b4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d00d      	beq.n	80014d8 <HAL_GPIO_Init+0x1e0>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a3c      	ldr	r2, [pc, #240]	; (80015b0 <HAL_GPIO_Init+0x2b8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d007      	beq.n	80014d4 <HAL_GPIO_Init+0x1dc>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a3b      	ldr	r2, [pc, #236]	; (80015b4 <HAL_GPIO_Init+0x2bc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d101      	bne.n	80014d0 <HAL_GPIO_Init+0x1d8>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e004      	b.n	80014da <HAL_GPIO_Init+0x1e2>
 80014d0:	2303      	movs	r3, #3
 80014d2:	e002      	b.n	80014da <HAL_GPIO_Init+0x1e2>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <HAL_GPIO_Init+0x1e2>
 80014d8:	2300      	movs	r3, #0
 80014da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014dc:	f002 0203 	and.w	r2, r2, #3
 80014e0:	0092      	lsls	r2, r2, #2
 80014e2:	4093      	lsls	r3, r2
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ea:	492f      	ldr	r1, [pc, #188]	; (80015a8 <HAL_GPIO_Init+0x2b0>)
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	492b      	ldr	r1, [pc, #172]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	43db      	mvns	r3, r3
 800151a:	4927      	ldr	r1, [pc, #156]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800151c:	4013      	ands	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4921      	ldr	r1, [pc, #132]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	43db      	mvns	r3, r3
 8001542:	491d      	ldr	r1, [pc, #116]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001544:	4013      	ands	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4917      	ldr	r1, [pc, #92]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	608b      	str	r3, [r1, #8]
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	43db      	mvns	r3, r3
 800156a:	4913      	ldr	r1, [pc, #76]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800156c:	4013      	ands	r3, r2
 800156e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01f      	beq.n	80015bc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	490d      	ldr	r1, [pc, #52]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	60cb      	str	r3, [r1, #12]
 8001588:	e01f      	b.n	80015ca <HAL_GPIO_Init+0x2d2>
 800158a:	bf00      	nop
 800158c:	10320000 	.word	0x10320000
 8001590:	10310000 	.word	0x10310000
 8001594:	10220000 	.word	0x10220000
 8001598:	10210000 	.word	0x10210000
 800159c:	10120000 	.word	0x10120000
 80015a0:	10110000 	.word	0x10110000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40010800 	.word	0x40010800
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	40011000 	.word	0x40011000
 80015b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_GPIO_Init+0x2f4>)
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4909      	ldr	r1, [pc, #36]	; (80015ec <HAL_GPIO_Init+0x2f4>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	3301      	adds	r3, #1
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f47f ae96 	bne.w	800130c <HAL_GPIO_Init+0x14>
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	372c      	adds	r7, #44	; 0x2c
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	40010400 	.word	0x40010400

080015f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	4013      	ands	r3, r2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e001      	b.n	8001612 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	807b      	strh	r3, [r7, #2]
 800162a:	4613      	mov	r3, r2
 800162c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800162e:	787b      	ldrb	r3, [r7, #1]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001634:	887a      	ldrh	r2, [r7, #2]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800163a:	e003      	b.n	8001644 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	041a      	lsls	r2, r3, #16
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	611a      	str	r2, [r3, #16]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001660:	887a      	ldrh	r2, [r7, #2]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4013      	ands	r3, r2
 8001666:	041a      	lsls	r2, r3, #16
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	43d9      	mvns	r1, r3
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	400b      	ands	r3, r1
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	611a      	str	r2, [r3, #16]
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e272      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 8087 	beq.w	80017ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a0:	4b92      	ldr	r3, [pc, #584]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d00c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ac:	4b8f      	ldr	r3, [pc, #572]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d112      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
 80016b8:	4b8c      	ldr	r3, [pc, #560]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d10b      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c6:	4b89      	ldr	r3, [pc, #548]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d06c      	beq.n	80017ac <HAL_RCC_OscConfig+0x12c>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d168      	bne.n	80017ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e24c      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x76>
 80016e8:	4b80      	ldr	r3, [pc, #512]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a7f      	ldr	r2, [pc, #508]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e02e      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x98>
 80016fe:	4b7b      	ldr	r3, [pc, #492]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7a      	ldr	r2, [pc, #488]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b78      	ldr	r3, [pc, #480]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a77      	ldr	r2, [pc, #476]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e01d      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0xbc>
 8001722:	4b72      	ldr	r3, [pc, #456]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a71      	ldr	r2, [pc, #452]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6e      	ldr	r2, [pc, #440]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 800173c:	4b6b      	ldr	r3, [pc, #428]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6a      	ldr	r2, [pc, #424]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a67      	ldr	r2, [pc, #412]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fcb4 	bl	80010c8 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fcb0 	bl	80010c8 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	; 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e200      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0xe4>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fca0 	bl	80010c8 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fc9c 	bl	80010c8 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1ec      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x10c>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d063      	beq.n	8001882 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ba:	4b4c      	ldr	r3, [pc, #304]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017c6:	4b49      	ldr	r3, [pc, #292]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d11c      	bne.n	800180c <HAL_RCC_OscConfig+0x18c>
 80017d2:	4b46      	ldr	r3, [pc, #280]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d116      	bne.n	800180c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	4b43      	ldr	r3, [pc, #268]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e1c0      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4939      	ldr	r1, [pc, #228]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	e03a      	b.n	8001882 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001814:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fc55 	bl	80010c8 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fc51 	bl	80010c8 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1a1      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4927      	ldr	r1, [pc, #156]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e015      	b.n	8001882 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fc34 	bl	80010c8 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fc30 	bl	80010c8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e180      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d03a      	beq.n	8001904 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d019      	beq.n	80018ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_RCC_OscConfig+0x274>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7ff fc14 	bl	80010c8 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff fc10 	bl	80010c8 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e160      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 faa6 	bl	8001e14 <RCC_Delay>
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_RCC_OscConfig+0x274>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fbfa 	bl	80010c8 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d6:	e00f      	b.n	80018f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fbf6 	bl	80010c8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d908      	bls.n	80018f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e146      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	42420000 	.word	0x42420000
 80018f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e9      	bne.n	80018d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80a6 	beq.w	8001a5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001916:	4b8b      	ldr	r3, [pc, #556]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10d      	bne.n	800193e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a87      	ldr	r2, [pc, #540]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b85      	ldr	r3, [pc, #532]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193a:	2301      	movs	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b82      	ldr	r3, [pc, #520]	; (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d118      	bne.n	800197c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7e      	ldr	r2, [pc, #504]	; (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7ff fbb7 	bl	80010c8 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff fbb3 	bl	80010c8 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b64      	cmp	r3, #100	; 0x64
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e103      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x4c8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x312>
 8001984:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a6e      	ldr	r2, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	e02d      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x334>
 800199a:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a69      	ldr	r2, [pc, #420]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	4b67      	ldr	r3, [pc, #412]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a66      	ldr	r2, [pc, #408]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	e01c      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x356>
 80019bc:	4b61      	ldr	r3, [pc, #388]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a60      	ldr	r2, [pc, #384]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	4b5e      	ldr	r3, [pc, #376]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a5d      	ldr	r2, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 80019d6:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a5a      	ldr	r2, [pc, #360]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	4b58      	ldr	r3, [pc, #352]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a57      	ldr	r2, [pc, #348]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d015      	beq.n	8001a22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f6:	f7ff fb67 	bl	80010c8 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff fb63 	bl	80010c8 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0b1      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ee      	beq.n	80019fe <HAL_RCC_OscConfig+0x37e>
 8001a20:	e014      	b.n	8001a4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fb51 	bl	80010c8 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fb4d 	bl	80010c8 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e09b      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ee      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d105      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a52:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a3b      	ldr	r2, [pc, #236]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8087 	beq.w	8001b76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d061      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d146      	bne.n	8001b0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <HAL_RCC_OscConfig+0x4cc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff fb21 	bl	80010c8 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff fb1d 	bl	80010c8 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e06d      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	4921      	ldr	r1, [pc, #132]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a19      	ldr	r1, [r3, #32]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	491b      	ldr	r1, [pc, #108]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_RCC_OscConfig+0x4cc>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff faf1 	bl	80010c8 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff faed 	bl	80010c8 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e03d      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x46a>
 8001b08:	e035      	b.n	8001b76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_RCC_OscConfig+0x4cc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fada 	bl	80010c8 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff fad6 	bl	80010c8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e026      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x498>
 8001b36:	e01e      	b.n	8001b76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e019      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_OscConfig+0x500>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d0      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d910      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0207 	bic.w	r2, r3, #7
 8001bae:	4965      	ldr	r1, [pc, #404]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0b8      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf8:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	494d      	ldr	r1, [pc, #308]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d040      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d115      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e07f      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e073      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06b      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f023 0203 	bic.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4936      	ldr	r1, [pc, #216]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c74:	f7ff fa28 	bl	80010c8 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7ff fa24 	bl	80010c8 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e053      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 020c 	and.w	r2, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d210      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4922      	ldr	r1, [pc, #136]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e032      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4916      	ldr	r1, [pc, #88]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d12:	f000 f821 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d16:	4602      	mov	r2, r0
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	490a      	ldr	r1, [pc, #40]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	5ccb      	ldrb	r3, [r1, r3]
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1cc>)
 8001d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1d0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f986 	bl	8001044 <HAL_InitTick>

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08002708 	.word	0x08002708
 8001d50:	20000004 	.word	0x20000004
 8001d54:	20000008 	.word	0x20000008

08001d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b490      	push	{r4, r7}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d5e:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d60:	1d3c      	adds	r4, r7, #4
 8001d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d68:	f240 2301 	movw	r3, #513	; 0x201
 8001d6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x40>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x46>
 8001d96:	e02b      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d9a:	623b      	str	r3, [r7, #32]
      break;
 8001d9c:	e02b      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3328      	adds	r3, #40	; 0x28
 8001da8:	443b      	add	r3, r7
 8001daa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d012      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	0c5b      	lsrs	r3, r3, #17
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	3328      	adds	r3, #40	; 0x28
 8001dc6:	443b      	add	r3, r7
 8001dc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dd2:	fb03 f202 	mul.w	r2, r3, r2
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	e004      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	623b      	str	r3, [r7, #32]
      break;
 8001dee:	e002      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001df2:	623b      	str	r3, [r7, #32]
      break;
 8001df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df6:	6a3b      	ldr	r3, [r7, #32]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc90      	pop	{r4, r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	080026f8 	.word	0x080026f8
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	007a1200 	.word	0x007a1200
 8001e10:	003d0900 	.word	0x003d0900

08001e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <RCC_Delay+0x34>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <RCC_Delay+0x38>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0a5b      	lsrs	r3, r3, #9
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e30:	bf00      	nop
  }
  while (Delay --);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	60fa      	str	r2, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f9      	bne.n	8001e30 <RCC_Delay+0x1c>
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	10624dd3 	.word	0x10624dd3

08001e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e041      	b.n	8001ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff f84c 	bl	8000f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f000 faa2 	bl	80023d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d001      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e035      	b.n	8001f74 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <HAL_TIM_Base_Start_IT+0x90>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_TIM_Base_Start_IT+0x4e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f32:	d004      	beq.n	8001f3e <HAL_TIM_Base_Start_IT+0x4e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_TIM_Base_Start_IT+0x94>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d111      	bne.n	8001f62 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d010      	beq.n	8001f72 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f60:	e007      	b.n	8001f72 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	40000400 	.word	0x40000400

08001f88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a1a      	ldr	r2, [r3, #32]
 8001fa6:	f241 1311 	movw	r3, #4369	; 0x1111
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10f      	bne.n	8001fd0 <HAL_TIM_Base_Stop_IT+0x48>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a1a      	ldr	r2, [r3, #32]
 8001fb6:	f240 4344 	movw	r3, #1092	; 0x444
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <HAL_TIM_Base_Stop_IT+0x48>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0202 	mvn.w	r2, #2
 8002010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f9ba 	bl	80023a0 <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f9ad 	bl	800238e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f9bc 	bl	80023b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b04      	cmp	r3, #4
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b04      	cmp	r3, #4
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0204 	mvn.w	r2, #4
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f990 	bl	80023a0 <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f983 	bl	800238e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f992 	bl	80023b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0208 	mvn.w	r2, #8
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2204      	movs	r2, #4
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f966 	bl	80023a0 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f959 	bl	800238e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f968 	bl	80023b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d122      	bne.n	800213c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b10      	cmp	r3, #16
 8002102:	d11b      	bne.n	800213c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0210 	mvn.w	r2, #16
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2208      	movs	r2, #8
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f93c 	bl	80023a0 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f92f 	bl	800238e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f93e 	bl	80023b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0201 	mvn.w	r2, #1
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f90a 	bl	800237c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b80      	cmp	r3, #128	; 0x80
 8002174:	d10e      	bne.n	8002194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002180:	2b80      	cmp	r3, #128	; 0x80
 8002182:	d107      	bne.n	8002194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fa71 	bl	8002676 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d10e      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ac:	2b40      	cmp	r3, #64	; 0x40
 80021ae:	d107      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f902 	bl	80023c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d10e      	bne.n	80021ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d107      	bne.n	80021ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0220 	mvn.w	r2, #32
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fa3c 	bl	8002664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_TIM_ConfigClockSource+0x18>
 8002208:	2302      	movs	r3, #2
 800220a:	e0b3      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x180>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800222a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002232:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002244:	d03e      	beq.n	80022c4 <HAL_TIM_ConfigClockSource+0xd0>
 8002246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800224a:	f200 8087 	bhi.w	800235c <HAL_TIM_ConfigClockSource+0x168>
 800224e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002252:	f000 8085 	beq.w	8002360 <HAL_TIM_ConfigClockSource+0x16c>
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225a:	d87f      	bhi.n	800235c <HAL_TIM_ConfigClockSource+0x168>
 800225c:	2b70      	cmp	r3, #112	; 0x70
 800225e:	d01a      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0xa2>
 8002260:	2b70      	cmp	r3, #112	; 0x70
 8002262:	d87b      	bhi.n	800235c <HAL_TIM_ConfigClockSource+0x168>
 8002264:	2b60      	cmp	r3, #96	; 0x60
 8002266:	d050      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x116>
 8002268:	2b60      	cmp	r3, #96	; 0x60
 800226a:	d877      	bhi.n	800235c <HAL_TIM_ConfigClockSource+0x168>
 800226c:	2b50      	cmp	r3, #80	; 0x50
 800226e:	d03c      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0xf6>
 8002270:	2b50      	cmp	r3, #80	; 0x50
 8002272:	d873      	bhi.n	800235c <HAL_TIM_ConfigClockSource+0x168>
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d058      	beq.n	800232a <HAL_TIM_ConfigClockSource+0x136>
 8002278:	2b40      	cmp	r3, #64	; 0x40
 800227a:	d86f      	bhi.n	800235c <HAL_TIM_ConfigClockSource+0x168>
 800227c:	2b30      	cmp	r3, #48	; 0x30
 800227e:	d064      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x156>
 8002280:	2b30      	cmp	r3, #48	; 0x30
 8002282:	d86b      	bhi.n	800235c <HAL_TIM_ConfigClockSource+0x168>
 8002284:	2b20      	cmp	r3, #32
 8002286:	d060      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x156>
 8002288:	2b20      	cmp	r3, #32
 800228a:	d867      	bhi.n	800235c <HAL_TIM_ConfigClockSource+0x168>
 800228c:	2b00      	cmp	r3, #0
 800228e:	d05c      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x156>
 8002290:	2b10      	cmp	r3, #16
 8002292:	d05a      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002294:	e062      	b.n	800235c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6899      	ldr	r1, [r3, #8]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f000 f966 	bl	8002576 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	609a      	str	r2, [r3, #8]
      break;
 80022c2:	e04e      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6899      	ldr	r1, [r3, #8]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f000 f94f 	bl	8002576 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022e6:	609a      	str	r2, [r3, #8]
      break;
 80022e8:	e03b      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f000 f8c6 	bl	8002488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2150      	movs	r1, #80	; 0x50
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f91d 	bl	8002542 <TIM_ITRx_SetConfig>
      break;
 8002308:	e02b      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	461a      	mov	r2, r3
 8002318:	f000 f8e4 	bl	80024e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2160      	movs	r1, #96	; 0x60
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f90d 	bl	8002542 <TIM_ITRx_SetConfig>
      break;
 8002328:	e01b      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	461a      	mov	r2, r3
 8002338:	f000 f8a6 	bl	8002488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2140      	movs	r1, #64	; 0x40
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f8fd 	bl	8002542 <TIM_ITRx_SetConfig>
      break;
 8002348:	e00b      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4619      	mov	r1, r3
 8002354:	4610      	mov	r0, r2
 8002356:	f000 f8f4 	bl	8002542 <TIM_ITRx_SetConfig>
        break;
 800235a:	e002      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800235c:	bf00      	nop
 800235e:	e000      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002360:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
	...

080023d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a25      	ldr	r2, [pc, #148]	; (8002480 <TIM_Base_SetConfig+0xa8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d007      	beq.n	8002400 <TIM_Base_SetConfig+0x28>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d003      	beq.n	8002400 <TIM_Base_SetConfig+0x28>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a22      	ldr	r2, [pc, #136]	; (8002484 <TIM_Base_SetConfig+0xac>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d108      	bne.n	8002412 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <TIM_Base_SetConfig+0xa8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <TIM_Base_SetConfig+0x52>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d003      	beq.n	800242a <TIM_Base_SetConfig+0x52>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <TIM_Base_SetConfig+0xac>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d108      	bne.n	800243c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a07      	ldr	r2, [pc, #28]	; (8002480 <TIM_Base_SetConfig+0xa8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d103      	bne.n	8002470 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	615a      	str	r2, [r3, #20]
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40000400 	.word	0x40000400

08002488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f023 0201 	bic.w	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f023 030a 	bic.w	r3, r3, #10
 80024c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	621a      	str	r2, [r3, #32]
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f023 0210 	bic.w	r2, r3, #16
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800250e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	031b      	lsls	r3, r3, #12
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002520:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	621a      	str	r2, [r3, #32]
}
 8002538:	bf00      	nop
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002542:	b480      	push	{r7}
 8002544:	b085      	sub	sp, #20
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	f043 0307 	orr.w	r3, r3, #7
 8002564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002576:	b480      	push	{r7}
 8002578:	b087      	sub	sp, #28
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002590:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	021a      	lsls	r2, r3, #8
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	431a      	orrs	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4313      	orrs	r3, r2
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	609a      	str	r2, [r3, #8]
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e041      	b.n	8002650 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a14      	ldr	r2, [pc, #80]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d009      	beq.n	8002624 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002618:	d004      	beq.n	8002624 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a10      	ldr	r2, [pc, #64]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10c      	bne.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800262a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	4313      	orrs	r3, r2
 8002634:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400

08002664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <__libc_init_array>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	2600      	movs	r6, #0
 800268c:	4d0c      	ldr	r5, [pc, #48]	; (80026c0 <__libc_init_array+0x38>)
 800268e:	4c0d      	ldr	r4, [pc, #52]	; (80026c4 <__libc_init_array+0x3c>)
 8002690:	1b64      	subs	r4, r4, r5
 8002692:	10a4      	asrs	r4, r4, #2
 8002694:	42a6      	cmp	r6, r4
 8002696:	d109      	bne.n	80026ac <__libc_init_array+0x24>
 8002698:	f000 f822 	bl	80026e0 <_init>
 800269c:	2600      	movs	r6, #0
 800269e:	4d0a      	ldr	r5, [pc, #40]	; (80026c8 <__libc_init_array+0x40>)
 80026a0:	4c0a      	ldr	r4, [pc, #40]	; (80026cc <__libc_init_array+0x44>)
 80026a2:	1b64      	subs	r4, r4, r5
 80026a4:	10a4      	asrs	r4, r4, #2
 80026a6:	42a6      	cmp	r6, r4
 80026a8:	d105      	bne.n	80026b6 <__libc_init_array+0x2e>
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
 80026ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b0:	4798      	blx	r3
 80026b2:	3601      	adds	r6, #1
 80026b4:	e7ee      	b.n	8002694 <__libc_init_array+0xc>
 80026b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ba:	4798      	blx	r3
 80026bc:	3601      	adds	r6, #1
 80026be:	e7f2      	b.n	80026a6 <__libc_init_array+0x1e>
 80026c0:	08002718 	.word	0x08002718
 80026c4:	08002718 	.word	0x08002718
 80026c8:	08002718 	.word	0x08002718
 80026cc:	0800271c 	.word	0x0800271c

080026d0 <memset>:
 80026d0:	4603      	mov	r3, r0
 80026d2:	4402      	add	r2, r0
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d100      	bne.n	80026da <memset+0xa>
 80026d8:	4770      	bx	lr
 80026da:	f803 1b01 	strb.w	r1, [r3], #1
 80026de:	e7f9      	b.n	80026d4 <memset+0x4>

080026e0 <_init>:
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	bf00      	nop
 80026e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e6:	bc08      	pop	{r3}
 80026e8:	469e      	mov	lr, r3
 80026ea:	4770      	bx	lr

080026ec <_fini>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	bf00      	nop
 80026f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f2:	bc08      	pop	{r3}
 80026f4:	469e      	mov	lr, r3
 80026f6:	4770      	bx	lr
